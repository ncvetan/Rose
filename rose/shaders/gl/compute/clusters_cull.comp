#version 460 core

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

// determines which lights are part of each cluster

// defines the bounds of a cluster
struct AABB {
    vec4 min_pt;
    vec4 max_pt;
};

struct DirLight {
	vec3 direction;
	vec3 color;
};

// light parameters for a particular point light
struct PointLight {
	vec4 color;
	float linear;
	float quad;
	float intensity;
	float radius;
};

struct Cluster {
    uint count;
    uint indices[100];
};

layout (std140, binding = 1) uniform globals_ubo {
	mat4 projection;
	mat4 view;
	vec3 camera_pos;
	DirLight dir_light;
	uvec3 grid_sz;				// cluster dimensions (xyz)
	uvec2 screen_dims;			// screen [ width, height ]
	float far_z;
	float near_z;
};

// aabb defining each cluster, computed the list clusters_aabb compute shader
layout (std430, binding=2) buffer aabb_ssbo {
    AABB cluster_aabb[];
};

// global list of light parameters
layout (std430, binding=3) buffer lights_ssbo {
    PointLight lights[];
};

// global list of light positions (this should always have the same length as lights_ssbo)
layout (std430, binding=4) buffer lights_pos_ssbo {
    vec4 lights_pos[];
};

layout (std430, binding=5) buffer clusters_ssbo {
    Cluster clusters[];
};

// tests a sphere to see if it affects the given cluster
bool sphere_aabb_test(vec3 light_pos, float light_radius, AABB aabb) {    
    float dist = 0.0;
    if (light_pos.x < aabb.min_pt.x) dist += pow(aabb.min_pt.x - light_pos.x, 2); 
    else if (light_pos.x > aabb.max_pt.x) dist += pow(light_pos.x - aabb.max_pt.x, 2);
    if (light_pos.y < aabb.min_pt.y) dist += pow(aabb.min_pt.y - light_pos.y, 2); 
    else if (light_pos.y > aabb.max_pt.y) dist += pow(light_pos.y - aabb.max_pt.y, 2);
    if (light_pos.z < aabb.min_pt.z) dist += pow(aabb.min_pt.z - light_pos.z, 2); 
    else if (light_pos.z > aabb.max_pt.z) dist += pow(light_pos.z - aabb.max_pt.z, 2);  
    return dist <= light_radius * light_radius;
}

uniform int n_lights;

void main() {

    uint cluster_idx = gl_WorkGroupID.x * 128 + gl_LocalInvocationID.x;

    AABB aabb = cluster_aabb[cluster_idx];
    clusters[cluster_idx].count = 0;

    for (uint idx = 0; idx < n_lights; ++idx) {
        vec3 light_pos = vec3(view * lights_pos[idx]);
        if (sphere_aabb_test(light_pos, lights[idx].radius, aabb) && clusters[cluster_idx].count < 100) {
            clusters[cluster_idx].indices[clusters[cluster_idx].count] = idx;
            clusters[cluster_idx].count++;
        }
    }
}