#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// computes the AABB that defines this cluster

// defines the bounds of a cluster
struct AABB {
    vec4 max_pt;
    vec4 min_pt;
};

layout (std430, binding=2) buffer clusters_ssbo {
    AABB cluster_aabb[];
};

uniform mat4 inv_proj;
uniform vec3 grid_sz;
uniform vec2 screen_dims;
uniform float far;          // far plane z-coord
uniform float near;         // near plane z-coord

// convert a point in screen space to view space
vec4 screen_to_view(vec2 screen_pt) {
    vec2 coord = screen_pt.xy / screen_dims.xy;
    vec4 clip = { 2 * coord.x - 1.0, 1.0 - 2 * coord.y, -1.0, 1.0 };
    vec4 view = inv_proj * clip;
    view /= view.w;
    return view;
}

// compute intersection point between line defined by v1 and v2 with a plane with given z value
vec3 line_plane_intersect(vec3 v1, vec3 v2, float z_dist) {
    vec3 norm = { 0.0, 0.0, -1.0 }; // normal to the plane, always long z-axis in view space
    vec3 dir = v2 - v1;
    // solve for line eq
    float t = (z_dist - dot(norm, v1)) / dot(norm, dir);
    return v1 + t * dir;
}

void main() {
    const vec3 camera_pos = { 0.0, 0.0, 0.0 };
    
    uint cluster_idx = gl_LocalInvocationIndex;
    
    vec2 cluster_sz = screen_dims.xy / grid_sz.xy;

    vec2 max_ss = (gl_WorkGroupID.xy + 1) * cluster_sz;    // max pt in screen space (br)
    vec2 min_ss = gl_WorkGroupID.xy * cluster_sz;          // min pt in screen space (tl)

    vec4 max_vs = screen_to_view(max_ss);
    vec4 min_vs = screen_to_view(min_ss);
    
    float z_near = near * pow(far / near, gl_WorkGroupID.z / grid_sz.z);
    float z_far = near * pow(far / near, (gl_WorkGroupID.z + 1) / grid_sz.z);

    // compute intersection points between line cast from camera and cluster planes
    vec3 min_near = line_plane_intersect(camera_pos, vec3(min_vs), z_near);
    vec3 min_far = line_plane_intersect(camera_pos, vec3(min_vs), z_far);
    vec3 max_near = line_plane_intersect(camera_pos, vec3(max_vs), z_near);
    vec3 max_far = line_plane_intersect(camera_pos, vec3(max_vs), z_far);

    cluster_aabb[cluster_idx].min_pt = vec4(min(min(min_near, min_far), min(max_near, max_far)), 0.0);
    cluster_aabb[cluster_idx].max_pt = vec4(max(max(min_near, min_far), max(max_near, max_far)), 0.0);
}